{
  "tasks": [
    {
      "id": "1.1",
      "title": "Initialize React project with Vite",
      "description": {
        "overview": "Set up a new React project using Vite as the foundation for the quiz application.",
        "user_stories": [
          "ST-107: As a developer, I want to load quiz questions from a JSON file so that content is easy to manage (requires project setup for JSON integration)."
        ],
        "implementation_details": "Run 'npm create vite@latest quiz-app -- --template react' to create the project. Install dependencies with 'npm install'. Configure basic project structure with src/, src/assets/, src/components/, src/pages/, and src/styles/."
      },
      "dependencies": [],
      "priority": "high"
    },
    {
      "id": "1.2",
      "title": "Install and configure React Router v6",
      "description": {
        "overview": "Add React Router v6 for client-side routing to enable navigation between pages.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires routing).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires quiz routing)."
        ],
        "implementation_details": "Install with 'npm install react-router-dom'. Configure in App.jsx with BrowserRouter and Routes components. Define initial routes for testing (to be finalized in Task 5)."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "1.3",
      "title": "Set up Emotion for styling",
      "description": {
        "overview": "Configure Emotion for CSS-in-JS to create styled components and manage theming.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires styled UI).",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips (requires styled results)."
        ],
        "implementation_details": "Install with 'npm install @emotion/react @emotion/styled'. Create a theme file in src/styles/theme.js defining the palette (Sienna #A0522D, Steel Blue #4682B4, Lavender Blush #FFF0F5, Pale Violet Red #DB7093, Dark Slate Gray #2F4F4F)."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "1.4",
      "title": "Integrate Framer Motion",
      "description": {
        "overview": "Add Framer Motion for animations to enhance UI interactions.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires animated header/button).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires animated checkboxes)."
        ],
        "implementation_details": "Install with 'npm install framer-motion'. Import in components requiring animations (e.g., fade-ins, slide-ins). Configure default animation duration (0.3s) in theme.js."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "1.5",
      "title": "Configure ESLint with Airbnb rules",
      "description": {
        "overview": "Set up ESLint to enforce code quality and consistency across the project.",
        "user_stories": [
          "ST-107: As a developer, I want to load quiz questions from a JSON file so that content is easy to manage (requires clean code for maintainability)."
        ],
        "implementation_details": "Run 'npm init @eslint/config' and select Airbnb style guide. Install dependencies ('npm install eslint-config-airbnb eslint-plugin-react'). Configure .eslintrc.json for React 18+ and JSX."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "1.6",
      "title": "Set up PostCSS with autoprefixer",
      "description": {
        "overview": "Configure PostCSS for CSS processing to ensure cross-browser compatibility.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires consistent styling)."
        ],
        "implementation_details": "Install with 'npm install postcss postcss-preset-env'. Create postcss.config.js with 'require('postcss-preset-env')'. Integrate with Vite via vite.config.js."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "2",
      "title": "Implement design system",
      "description": {
        "overview": "Define the project’s visual design system, including color palette, typography, and reusable styled components for consistent UI.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires styled UI).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires styled quiz).",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips (requires styled results)."
        ],
        "implementation_details": "In src/styles/, create components for Button (Sienna #A0522D), Card (Lavender Blush #FFF0F5 with Sienna border), Input (Lavender Blush with Dark Slate Gray #2F4F4F text), and ProgressBar (Steel Blue #4682B4). Use Poppins/Montserrat fonts via Google Fonts. Ensure WCAG 2.1 contrast (4.5:1 for text, 3:1 for UI)."
      },
      "dependencies": ["1.3"],
      "priority": "high"
    },
    {
      "id": "3",
      "title": "Integrate SVGs",
      "description": {
        "overview": "Add provided SVG files (rangoli, mandala, lotus, floral, dots) to the assets folder and create utilities for UI integration.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires rangoli header).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires lotus separators).",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips (requires rangoli wheel)."
        ],
        "implementation_details": "Place SVGs in src/assets/. Create SVG components (e.g., RangoliHeader.jsx) with Emotion styling (Sienna #A0522D, Pale Violet Red #DB7093). Optimize SVGs using svgo for performance. Export components for use in IntroPage, QuizPage, and ResultsPage."
      },
      "dependencies": ["1.1"],
      "priority": "medium"
    },
    {
      "id": "4",
      "title": "Implement global state with context and sessionStorage",
      "description": {
        "overview": "Set up global state management to store user name, current area, and answers, syncing with sessionStorage for persistence.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires answer storage).",
          "ST-104: As a user, I want to resume my quiz if I accidentally close the tab so that I don’t lose progress.",
          "ST-106: As a user, I want to enter my name so that my results feel personalized."
        ],
        "implementation_details": "Create a QuizContext in src/context/QuizContext.jsx using useReducer for state (name, areaId, answers). Use useEffect to sync state with sessionStorage. Provide context in App.jsx. Load state on app start to resume progress."
      },
      "dependencies": ["1.1"],
      "priority": "high"
    },
    {
      "id": "5",
      "title": "Set up routing",
      "description": {
        "overview": "Configure client-side routing using React Router v6 to enable navigation between the Intro page, Quiz pages (dynamic for 5 areas), and Results page.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires '/' route).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (requires '/quiz/:areaId' routes).",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips (requires '/results' route)."
        ],
        "implementation_details": "In App.jsx, define routes: '/' for IntroPage, '/quiz/:areaId' (dynamic for areas 1-5) for QuizPage, and '/results' for ResultsPage. Use useNavigate and useParams hooks for navigation and area ID extraction. Pass name from IntroPage to QuizPage via state. Prevent revisiting previous areas by checking global state."
      },
      "dependencies": ["1.1", "1.2", "4"],
      "priority": "high"
    },
    {
      "id": "6.1",
      "title": "Develop IntroPage component structure",
      "description": {
        "overview": "Create the core structure for the standalone IntroPage, featuring a welcome message, name input, and 'Start Quiz' button, styled with Indian cultural elements.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz. The intro page loads with a welcome message and rangoli-inspired header, a text input for my name with validation, and a 'Start Quiz' button navigates to the quiz page when clicked.",
          "ST-106: As a user, I want to enter my name so that my results feel personalized."
        ],
        "implementation_details": "Build IntroPage.jsx with a centered layout on Lavender Blush (#FFF0F5). Include a rangoli SVG header (Sienna #A0522D, Pale Violet Red #DB7093) and a Sienna 'Start Quiz' button with Framer Motion fade-in (0.3s). Implement text input with non-empty validation using useState. Use useNavigate to route to '/quiz/1' with name state."
      },
      "dependencies": ["1.1", "1.2", "1.3", "1.4", "2", "3", "4", "5"],
      "priority": "high"
    },
    {
      "id": "6.2",
      "title": "Add Quiz Page 1 preview",
      "description": {
        "overview": "Integrate a non-interactive preview of Quiz Page 1 (First Impressions) to showcase a sample question and boost engagement.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results (preview contextualizes quiz format)."
        ],
        "implementation_details": "Create a QuizPreview component in IntroPage.jsx, rendering a static question from questions.json (e.g., 'Myth: You need to be charming right away' with options A-D). Style disabled checkboxes with Pale Violet Red (#DB7093) outlines on Lavender Blush (#FFF0F5). Add a 'See how you’d answer!' hover effect (Framer Motion, 0.3s scale) linking to name input."
      },
      "dependencies": ["6.1", "7.2"],
      "priority": "high"
    },
    {
      "id": "6.3",
      "title": "Implement dating myths blurb",
      "description": {
        "overview": "Add a concise blurb on dating myths to set the quiz’s tone with Indian cultural coloring.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (blurb enhances welcoming experience)."
        ],
        "implementation_details": "Build a MythBlurb component with text: 'Think dating needs a Bollywood sparkle or a perfect rishta match? Let’s bust those myths!' Use a rangoli SVG border (Sienna #A0522D, Pale Violet Red #DB7093) and Steel Blue (#4682B4) text on Lavender Blush (#FFF0F5). Apply Framer Motion fade-in (0.3s). Ensure WCAG 2.1 contrast (4.5:1)."
      },
      "dependencies": ["6.1", "3"],
      "priority": "medium"
    },
    {
      "id": "6.4",
      "title": "Add encouragement banner",
      "description": {
        "overview": "Include a bold encouragement banner to motivate users and drive quiz participation.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (banner encourages starting)."
        ],
        "implementation_details": "Create an EncouragementBanner component with text: 'Ready to rediscover dating? You’re enough—jump in!' Use Dark Slate Gray (#2F4F4F) text on Pale Violet Red (#DB7093) background with a lotus SVG (Steel Blue #4682B4). Add a secondary 'Start Quiz' button (Sienna #A0522D) with Framer Motion hover scale (0.3s)."
      },
      "dependencies": ["6.1", "3"],
      "priority": "high"
    },
    {
      "id": "6.5",
      "title": "Include Indian divorced spotlight",
      "description": {
        "overview": "Add a spotlight for Indian divorced, later-in-life daters to promote inclusivity with cultural coloring.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (spotlight enhances relevance)."
        ],
        "implementation_details": "Build a Spotlight component with text: 'Divorced and dating later in life? Your journey’s strength is your charm—find connection over chai.' Use a mandala SVG background (Sienna #A0522D, Pale Violet Red #DB7093) and Dark Slate Gray (#2F4F4F) text on Lavender Blush (#FFF0F5). Hide on mobile via media queries."
      },
      "dependencies": ["6.1", "3"],
      "priority": "medium"
    },
    {
      "id": "6.6",
      "title": "Include non-Indian divorced spotlight",
      "description": {
        "overview": "Add a spotlight for non-Indian divorced, later-in-life daters to ensure inclusivity.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (spotlight broadens appeal)."
        ],
        "implementation_details": "Extend Spotlight component with text: 'Divorced and starting fresh? Your life’s story is your spark—dive into dating!' Use Steel Blue (#4682B4) text on Lavender Blush (#FFF0F5) with a floral SVG (Pale Violet Red #DB7093). Hide on mobile via media queries."
      },
      "dependencies": ["6.1", "3"],
      "priority": "medium"
    },
    {
      "id": "6.7",
      "title": "Optimize Intro page for mobile",
      "description": {
        "overview": "Ensure the Intro page is responsive and uncluttered on mobile, prioritizing key elements.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (mobile accessibility ensures usability)."
        ],
        "implementation_details": "Apply CSS media queries to stack components vertically on screens <768px. Prioritize QuizPreview (6.2), MythBlurb (6.3), and EncouragementBanner (6.4); hide spotlights (6.5, 6.6) on mobile. Ensure touch-friendly sizing (48x48px) and WCAG 2.1 contrast (4.5:1)."
      },
      "dependencies": ["6.1", "6.2", "6.3", "6.4", "6.5", "6.6"],
      "priority": "high"
    },
    {
      "id": "7.1",
      "title": "Create QuizPage component",
      "description": {
        "overview": "Set up the structure for the QuizPage component to render area-specific quiz questions dynamically.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results."
        ],
        "implementation_details": "Create QuizPage.jsx with a layout for questions. Use useParams to extract areaId from '/quiz/:areaId'. Integrate with global state (useContext) for user name and answers. Apply Lavender Blush (#FFF0F5) background with Steel Blue (#4682B4) accents."
      },
      "dependencies": ["5", "4"],
      "priority": "high"
    },
    {
      "id": "7.2",
      "title": "Load questions from JSON",
      "description": {
        "overview": "Load quiz questions from a JSON file to populate the QuizPage dynamically.",
        "user_stories": [
          "ST-107: As a developer, I want to load quiz questions from a JSON file so that content is easy to manage."
        ],
        "implementation_details": "Import questions.json in QuizPage.jsx. Filter questions by areaId (e.g., First Impressions for areaId=1). Store in local state (useState). Ensure JSON supports 15 questions (5 areas, 3 each) with 1-3 correct answers."
      },
      "dependencies": ["7.1"],
      "priority": "high"
    },
    {
      "id": "7.3",
      "title": "Render questions with checkboxes",
      "description": {
        "overview": "Display 3 questions per area with animated checkboxes for multiple-choice answers.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results."
        ],
        "implementation_details": "Render questions as a Question component list in QuizPage.jsx, each with 4 checkboxes (Pale Violet Red #DB7093 outlines on Lavender Blush #FFF0F5). Apply Framer Motion slide-in (0.3s). Use lotus/paisley SVG separators (Sienna #A0522D)."
      },
      "dependencies": ["7.2", "2", "3"],
      "priority": "high"
    },
    {
      "id": "7.4",
      "title": "Implement progress bar",
      "description": {
        "overview": "Add a styled progress bar to indicate the current quiz area.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results."
        ],
        "implementation_details": "Create a ProgressBar component in QuizPage.jsx, showing 'Area X of 5' with Steel Blue (#4682B4) fill on Lavender Blush (#FFF0F5). Calculate progress from areaId (e.g., 20% for areaId=1). Add Framer Motion transition (0.3s)."
      },
      "dependencies": ["7.1", "2"],
      "priority": "high"
    },
    {
      "id": "7.5",
      "title": "Add 'Next' button with logic",
      "description": {
        "overview": "Implement a 'Next' button to advance to the next area or results, disabled until all questions are answered.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results.",
          "ST-105: As a user, I want to see an error message if I try to proceed without answering all questions."
        ],
        "implementation_details": "Add a Sienna #A0522D 'Next' button in QuizPage.jsx, disabled until each question has at least one checkbox selected (useState tracking). Navigate to '/quiz/:nextAreaId' or '/results' (areaId=5). Show error message (Dark Slate Gray #2F4F4F) if incomplete."
      },
      "dependencies": ["7.3", "4"],
      "priority": "high"
    },
    {
      "id": "7.6",
      "title": "Save answers to context and sessionStorage",
      "description": {
        "overview": "Store user answers in global state and sessionStorage for persistence across refreshes.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results.",
          "ST-104: As a user, I want to resume my quiz if I accidentally close the tab so that I don’t lose progress."
        ],
        "implementation_details": "Update global state (useContext, useReducer) with checkbox selections. Sync to sessionStorage via useEffect. Load state on QuizPage mount to resume progress. Clear sessionStorage on quiz completion."
      },
      "dependencies": ["7.5", "4"],
      "priority": "high"
    },
    {
      "id": "7.7",
      "title": "Handle navigation to next area or results",
      "description": {
        "overview": "Implement logic to navigate to the next quiz area or results page, preventing revisits to previous areas.",
        "user_stories": [
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results."
        ],
        "implementation_details": "In QuizPage.jsx, use useNavigate to route to '/quiz/:nextAreaId' or '/results' after 'Next' click. Check global state to block revisits (e.g., redirect to '/results' if areaId < current). Pass answers via state to ResultsPage."
      },
      "dependencies": ["7.5", "5"],
      "priority": "high"
    },
    {
      "id": "8",
      "title": "Implement utility functions",
      "description": {
        "overview": "Create pure functions for score calculation, area analysis, and tip selection.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "In src/utils/, create: calculateScores(answers) to compute total and area scores (1 point per question if any correct answer selected), getStrongestWeakestAreas(areaScores) to identify areas (prioritize First Impressions for weakest ties), and getTips(weakestArea) to return 3 tips."
      },
      "dependencies": [],
      "priority": "medium"
    },
    {
      "id": "9.1",
      "title": "Create ResultsPage component",
      "description": {
        "overview": "Set up the structure for the ResultsPage to display quiz outcomes and tips.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "Create ResultsPage.jsx with sections for scores, rangoli wheel, title, tips, and screenshot prompt. Apply Lavender Blush (#FFF0F5) background. Use global state (useContext) for answers and name."
      },
      "dependencies": ["5"],
      "priority": "medium"
    },
    {
      "id": "9.2",
      "title": "Retrieve answers and calculate scores",
      "description": {
        "overview": "Fetch answers from state and compute scores for display.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "In ResultsPage.jsx, retrieve answers from global state. Call calculateScores to get total (out of 15) and area scores (out of 3). Pass to getStrongestWeakestAreas for analysis."
      },
      "dependencies": ["9.1", "4", "8"],
      "priority": "medium"
    },
    {
      "id": "9.3",
      "title": "Render rangoli progress wheel",
      "description": {
        "overview": "Display an SVG-based rangoli progress wheel to visualize area scores.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "Create a RangoliWheel component using rangoli SVG (Sienna #A0522D, Steel Blue #4682B4). Dynamically render segments based on area scores. Apply Framer Motion fade-in (0.3s). Ensure scalability on mobile."
      },
      "dependencies": ["9.2", "3"],
      "priority": "medium"
    },
    {
      "id": "9.4",
      "title": "Display scores and title",
      "description": {
        "overview": "Show total score, area scores, and assigned title based on quiz results.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "In ResultsPage.jsx, render total score (e.g., '12/15'), area scores (e.g., 'First Impressions: 2/3'), and title (e.g., 'Confident Connector' for 12-15). Use Dark Slate Gray (#2F4F4F) text on Lavender Blush (#FFF0F5)."
      },
      "dependencies": ["9.2", "2"],
      "priority": "medium"
    },
    {
      "id": "9.5",
      "title": "Show personalized tips",
      "description": {
        "overview": "Display 3 personalized tips based on the weakest area in styled cards.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "Create a TipsCard component for each tip, styled with Lavender Blush (#FFF0F5) background and Sienna #A0522D border. Call getTips(weakestArea) to fetch tips (e.g., 'Try a coffee date at Philz'). Apply Framer Motion slide-in (0.3s)."
      },
      "dependencies": ["9.2", "2", "8"],
      "priority": "medium"
    },
    {
      "id": "9.6",
      "title": "Add styled screenshot prompt",
      "description": {
        "overview": "Implement a screenshot prompt to encourage sharing results at the event.",
        "user_stories": [
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips (prompt encourages sharing)."
        ],
        "implementation_details": "Add a ScreenshotPrompt component with text: 'Take a screenshot to share your results at the Silicon Valley date night event!' in a styled container (Lavender Blush #FFF0F5, Sienna #A0522D border, rangoli dot SVG). Apply Framer Motion fade-in (0.3s)."
      },
      "dependencies": ["9.1", "2", "3"],
      "priority": "medium"
    },
    {
      "id": "10",
      "title": "Implement error handling",
      "description": {
        "overview": "Add error messages for invalid user inputs to improve UX.",
        "user_stories": [
          "ST-105: As a user, I want to see an error message if I try to proceed without answering all questions.",
          "ST-106: As a user, I want to enter my name so that my results feel personalized (requires name validation)."
        ],
        "implementation_details": "In IntroPage.jsx, show an error (Dark Slate Gray #2F4F4F) for empty name input on 'Start Quiz' click. In QuizPage.jsx, display an error if 'Next' is clicked without all questions answered. Use Emotion for styling."
      },
      "dependencies": ["6.1", "7.5"],
      "priority": "low"
    },
    {
      "id": "11",
      "title": "Testing and debugging",
      "description": {
        "overview": "Test the application for functionality, responsiveness, and accessibility, resolving any issues.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz.",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results.",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "Use React Testing Library to test components (IntroPage, QuizPage, ResultsPage). Verify responsiveness on mobile devices (<768px). Check WCAG 2.1 compliance (contrast, ARIA labels). Debug state (sessionStorage) and navigation issues. Run 'npm test' in Windsurf."
      },
      "dependencies": ["6.7", "7.7", "9.6", "10"],
      "priority": "high"
    },
    {
      "id": "12",
      "title": "Deployment",
      "description": {
        "overview": "Deploy the application to Vercel for public access.",
        "user_stories": [
          "ST-101: As a user, I want to access the intro page so that I can start the quiz (requires live site).",
          "ST-102: As a user, I want to take the quiz by answering questions in each area so that I can get my results.",
          "ST-103: As a user, I want to view my quiz results so that I can see my score and personalized tips."
        ],
        "implementation_details": "Set up a Vercel project linked to the Git repository. Configure build settings in vercel.json for Vite (e.g., output to dist/). Deploy using 'vercel --prod'. Verify the live site for functionality and performance."
      },
      "dependencies": ["11"],
      "priority": "medium"
    }
  ]
}